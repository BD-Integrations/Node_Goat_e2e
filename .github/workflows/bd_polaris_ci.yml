name: BlackDuck-CI-Polaris # Name of the workflow
on:
  push:  # Trigger the workflow on push events
    branches: [main, master, develop, stage, release]  # Specify branches to trigger on push
  pull_request:  # Trigger the workflow on pull request events
    branches: [main, master, develop, stage, release]  # Specify branches to trigger on PR
  workflow_dispatch:
jobs:
  build:  # Define a job named 'build'
    runs-on: [sh_mac_mdn]  # Self Hosted Runner mac
    #runs-on: [ubuntu-latest]
    #runs-on: [windows-latest]


    steps:  # List of steps to execute in this job
      - name: Checkout Source  # Step to check out the repository code
        uses: actions/checkout@v4 # Use the checkout action to clone the repo
      - name: Polaris Full Scan  # Step for running a full CNC Scan
        uses: blackduck-inc/black-duck-security-scan@v2  # Use the Black Duck security scan action
        with:
          polaris_server_url: ${{ secrets.POLARIS_SERVER_URL }}
          polaris_access_token: ${{ secrets.POLARIS_ACCESS_TOKEN }}
          polaris_application_name: "Node_Goat_Repo_03_Test_Aug22_Debug"
          polaris_project_name: "Node_Goat_Repo_03_Test_Aug22_Debug"
          # polaris_application_name: "Node_Goat_Repo_Test_Dir_Aug20"
          # polaris_project_name: "Node_Goat_Repo_Test_Dir_Aug20"
          #polaris_application_name: "Node_Goat_Repo_Test_Archive_Aug20"
          #polaris_project_name: "Node_Goat_Repo_Test_Archive_Aug20"
          polaris_assessment_types: "SCA,SAST"
          #polaris_assessment_types: "SCA"
          #polaris_assessment_types: "SAST"
          
          
           ### Uncomment below configuration if Bridge diagnostic files needs to be uploaded
          include_diagnostics: true

         ### Signature scan
          #polaris_test_sca_type: "SCA-SIGNATURE"
          #polaris_test_sca_type: "SCA-PACKAGE"

         #async mode
         # polaris_waitForScan: false  # Used to support the async mode

        ### Uncomment below configuration for source code upload 
          #polaris_assessment_mode: "SOURCE_UPLOAD"
          polaris_assessment_mode: "CI"
          #project_directory: "/Users/madhavanr/GitHubTest_E2E/Repos/Node_Goat_e2e"
          #project_source_excludes: "artifacts,config,test,*.md,*.yml" # Accepts Multiple Values
          #project_source_archive: "/Users/madhavanr/GitHubTest_E2E/Repos/Node_Goat_e2e.zip"
          # project_source_preserveSymLinks: true

      
        ### SARIF report generation and upload to GitHub Adavanced Security Tab: Uncomment below to enable
        #   polaris_reports_sarif_create: true  
        #   polaris_reports_sarif_groupSCAIssues: true
        #   polaris_reports_sarif_issue_types: 'SCA,SAST'
        #   polaris_reports_sarif_file_path: '/Users/madhavanr/GitHubTest_E2E/sarif_Path/Polris_Sarif_Reports.json' # File path (including file name) where SARIF report is created.
        # # polaris_reports_sarif_severities: "CRITICAL,HIGH"
        # polaris_upload_sarif_report: true 
        # github_token: ${{ secrets.GITHUB_TOKEN }} # Required when polaris_upload_sarif_report is set as true

 ### Below configuration is used to enable feedback from Polaris security testing as pull request comment
          polaris_prComment_enabled: true
          github_token: ${{ secrets.BD_GITHUB_TOKEN }}
                ### Mark build status if policy violating issues are found

        # Rapid Scans
          polaris_test_sast_Type: 'SAST_RAPID'   
          #polaris_test_sast_Type: 'SAST_FULL'      
          mark_build_status: 'success'

              